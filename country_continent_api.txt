requirements.txt:
fastapi
uvicorn[standard]
SQLAlchemy>=1.4
asyncpg
alembic
aiosqlite
psycopg2-binary
python-dotenv
cachetools
requests
httpx
pytest 
pytest-asyncio

run.py:
import uvicorn

if __name__ == "__main__":
    uvicorn.run("app.main:app", host="0.0.0.0", port=8000, reload=True)


runtime.txt:
python-3.10.0


alembic\env.py:
import asyncio
from logging.config import fileConfig
from sqlalchemy import pool
from sqlalchemy.ext.asyncio import async_engine_from_config
from alembic import context

# Import your models' metadata
from app.models.models import Base
from app.database import DATABASE_URL

# Alembic Config object
config = context.config

# Set the SQLAlchemy URL
config.set_main_option('sqlalchemy.url', DATABASE_URL)

# Interpret the config file for Python logging.
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# Set target metadata for 'autogenerate' support
target_metadata = Base.metadata

def run_migrations_offline():
    """
    Run migrations in 'offline' mode.
    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
        compare_type=True,  # Enable comparison of column types
    )

    with context.begin_transaction():
        context.run_migrations()

def do_run_migrations(connection):
    """
    Run migrations using the given connection.
    """
    context.configure(
        connection=connection,
        target_metadata=target_metadata,
        compare_type=True,  # Enable comparison of column types
    )

    with context.begin_transaction():
        context.run_migrations()

async def run_async_migrations():
    """
    Run migrations in 'online' mode with an async engine.
    """
    connectable = async_engine_from_config(
        config.get_section(config.config_ini_section),
        prefix='sqlalchemy.',
        poolclass=pool.NullPool,
    )

    async with connectable.connect() as connection:
        await connection.run_sync(do_run_migrations)

    await connectable.dispose()

def run_migrations_online():
    """
    Entrypoint for running migrations in 'online' mode.
    """
    asyncio.run(run_async_migrations())

# Determine if we are running in offline or online mode
if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()


app\database.py:
import os
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker, declarative_base
from dotenv import load_dotenv

load_dotenv()  # Load environment variables from .env

DATABASE_URL = os.getenv("DATABASE_URL", "sqlite+aiosqlite:///./countries.db")

engine = create_async_engine(DATABASE_URL, echo=False)

async_session = sessionmaker(
    engine, class_=AsyncSession, expire_on_commit=False
)

Base = declarative_base()


app\dependencies.py:
from typing import AsyncGenerator
from app.database import AsyncSession
from app.database import async_session

async def get_db() -> AsyncGenerator[AsyncSession, None]:
    async with async_session() as session:
        yield session


app\initial_data.py:
import asyncio
import requests
import sys
import os
import re

from sqlalchemy.future import select
from sqlalchemy import text

sys.path.append(os.path.abspath('.'))
from app.database import async_session, engine, Base
from app.models.models import Continent

# Gist URL that contains the initial SQL data
GIST_URL = "https://gist.githubusercontent.com/nobuti/3816985/raw/0c3ad0cf3854bc8c4ac8dcb335ee59de5218aa4f/gistfile1.txt"

async def fetch_and_parse_sql():
    """
    Fetches the SQL file from the gist and parses the SQL commands.
    """
    response = requests.get(GIST_URL)
    if response.status_code == 200:
        sql_commands = response.text.split(";")

        return sql_commands
    else:
        raise Exception(f"Failed to fetch the SQL file. Status code: {response.status_code}")
    
def clean_sql_statement(sql):
    # Remove COMMENT clauses
    sql = re.sub(r"COMMENT\s+'[^']*'", "", sql)
    # Remove ENGINE=InnoDB
    sql = sql.replace("ENGINE=InnoDB", "")
    # Replace ` with " for identifiers
    sql = sql.replace("`", '"')

    # Modify INSERT statement for continents
    if "INSERT INTO \"continents\"" in sql:
        sql = sql.replace("INSERT INTO \"continents\" VALUES", 
                          "INSERT INTO \"continents\" (code, name) VALUES")

    return sql.strip()

async def init_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.drop_all)
        await conn.run_sync(Base.metadata.create_all)

    async with async_session() as session:
        result = await session.execute(select(Continent))
        continents = result.scalars().all()
        if continents:
            print("Initial data already exists.")
            return

        sql_commands = await fetch_and_parse_sql()

        for command in sql_commands:
            sql = clean_sql_statement(command)
            if sql:
                try:
                    await session.execute(text(sql))
                    await session.commit()
                except Exception as e:
                    print(f"Error executing SQL: {e}")
                    print(f"Problematic SQL: {sql}")
                    await session.rollback()

        print("Continents and Countries data inserted.")

if __name__ == '__main__':
    asyncio.run(init_db())


app\main.py:
from fastapi import FastAPI
from app.routers import country_router, continent_router

# Initialize the FastAPI app
app = FastAPI(title="Country-Continent API", version="1.0.0")

# Include routers from the routers module
app.include_router(country_router)
app.include_router(continent_router)

# Root endpoint
@app.get("/")
async def root():
    """
    Root endpoint that returns a welcome message.
    """
    return {"message": "Welcome to the Country-Continent API!"}


app\__init__.py:


app\crud\crud.py:
from sqlite3 import IntegrityError
from sqlalchemy.future import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import joinedload
from app.models.models import Country, Continent
from typing import List, Optional
from datetime import datetime
from cachetools import TTLCache, cached


# CRUD operations for Country
async def get_country_by_name(session: AsyncSession, country_name: str) -> Optional[Country]:
    """
    Retrieve a Country by its name.
    """
    result = await session.execute(
        select(Country).where(Country.name == country_name).options(joinedload(Country.continent))
    )
    return result.scalar_one_or_none()

#  Define a cache with a max size and TTL (time-to-live)
country_cache = TTLCache(maxsize=1000, ttl=300)  # Cache up to 1000 items for 5 minutes
@cached(cache=country_cache)
async def get_country_by_name_cached(session: AsyncSession, country_name: str) -> Optional[Country]:
    return await get_country_by_name(session, country_name)

async def get_countries(session: AsyncSession, skip: int = 0, limit: int = 10, updated_after: Optional[datetime] = None) -> List[Country]:
    """
    Retrieve a list of Countries with pagination and optional updated_at filter.
    """
    query = select(Country).offset(skip).limit(limit)
    if updated_after:
        query = query.where(Country.updated_at > updated_after)
    result = await session.execute(query)
    return result.scalars().all()


async def create_country(session: AsyncSession, country_data) -> Country:
    """
    Create a new Country.
    """
    new_country = Country(**country_data.dict())
    session.add(new_country)
    await session.commit()
    await session.refresh(new_country)
    return new_country

async def update_country(session: AsyncSession, db_country: Country, country_data) -> Country:
    """
    Update an existing Country.
    """
    for var, value in vars(country_data).items():
        if value is not None:
            setattr(db_country, var, value)
    await session.commit()
    await session.refresh(db_country)
    return db_country

async def delete_country(session: AsyncSession, db_country: Country):
    """
    Delete a Country.
    """
    await session.delete(db_country)
    await session.commit()

# CRUD operations for Continent

async def get_country_continent_mapping(session: AsyncSession) -> dict:
    """
    Retrieve a dictionary mapping each country name to its corresponding continent name.
    """
    result = await session.execute(
        select(Country.name, Continent.name).join(Continent, Country.continent_code == Continent.code)
    )
    country_continent_mapping = {country: continent for country, continent in result.all()}
    return country_continent_mapping

async def get_continent_by_code(session: AsyncSession, code: str) -> Optional[Continent]:
    """
    Retrieve a Continent by its code.
    """
    result = await session.execute(
        select(Continent).where(Continent.code == code)
    )
    return result.scalar_one_or_none()

async def get_continents(session: AsyncSession, skip: int = 0, limit: int = 10) -> List[Continent]:
    """
    Retrieve a list of Continents with pagination.
    """
    result = await session.execute(
        select(Continent).offset(skip).limit(limit)
    )
    return result.scalars().all()

async def create_continent(session: AsyncSession, continent_data) -> Continent:
    """
    Create a new Continent.
    """
    new_continent = Continent(**continent_data.dict())
    session.add(new_continent)
    await session.commit()
    await session.refresh(new_continent)
    return new_continent

async def update_continent(session: AsyncSession, db_continent: Continent, continent_data) -> Continent:
    """
    Update an existing Continent.
    """
    for var, value in vars(continent_data).items():
        if value is not None:
            setattr(db_continent, var, value)
    await session.commit()
    await session.refresh(db_continent)
    return db_continent

async def delete_continent(session: AsyncSession, db_continent: Continent):
    """
    Delete a Continent.
    """
    await session.delete(db_continent)
    await session.commit()

async def bulk_create_countries(session: AsyncSession, countries: List[Country]) -> List[Country]:
    session.add_all(countries)
    try:
        await session.commit()
    except IntegrityError:
        await session.rollback()
        raise
    return countries

async def bulk_update_countries(session: AsyncSession, countries: List[Country]) -> List[Country]:
    for country in countries:
        session.merge(country)
    try:
        await session.commit()
    except IntegrityError:
        await session.rollback()
        raise
    return countries


app\crud\__init__.py:
# app/crud/__init__.py

# This file makes it easier to import CRUD functions elsewhere in the project
from .crud import (
    get_country_by_name, get_country_by_name_cached, get_countries, create_country, update_country, delete_country,
    get_country_continent_mapping, get_continent_by_code, get_continents, create_continent, update_continent, delete_continent
)


app\models\models.py:
from sqlalchemy import Column, String, Integer, DateTime, ForeignKey, func, Index
from sqlalchemy.orm import relationship
from app.database import Base

class Continent(Base):
    """
    SQLAlchemy model for the 'continents' table.
    Represents a continent with a code and name.
    """
    __tablename__ = 'continents'

    code = Column(String(2), primary_key=True, comment='Continent code')
    name = Column(String(255), nullable=False)
    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now())

    # Relationship to countries
    countries = relationship("Country", back_populates="continent")

    # Adding index
    table_args__ = (
        Index('idx_continent_name', 'name'),
    )

class Country(Base):
    """
    SQLAlchemy model for the 'countries' table.
    Represents a country with various attributes and a foreign key to a continent.
    """
    __tablename__ = 'countries'

    code = Column(String(2), primary_key=True, comment='Two-letter country code (ISO 3166-1 alpha-2)')
    name = Column(String(255), nullable=False, comment='English country name')
    full_name = Column(String(255), nullable=False, comment='Full English country name')
    iso3 = Column(String(3), nullable=False, comment='Three-letter country code (ISO 3166-1 alpha-3)')
    number = Column(Integer, nullable=False, comment='Three-digit country number (ISO 3166-1 numeric)')
    continent_code = Column(String(2), ForeignKey('continents.code'), nullable=False)
    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now())

    # Relationship to continent
    continent = relationship("Continent", back_populates="countries")

    # Adding indexes
    __table_args__ = (
        Index('idx_country_name', 'name'),
        Index('idx_country_continent', 'continent_code'),
    )

app\models\__init__.py:
# This file makes it easier to import models elsewhere in the project
from .models import Continent, Country


app\routers\continent_router.py:
from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.ext.asyncio import AsyncSession
from typing import AsyncGenerator, List

from app.database import async_session
from app.models.models import Continent
from app.schemas import ContinentCreate, ContinentUpdate, ContinentOut
from app.dependencies import get_db
from app.crud import (
    get_continent_by_code, get_continents, create_continent, update_continent, delete_continent
)

router = APIRouter(
    prefix="/continents",
    tags=["continents"],
    responses={404: {"description": "Not found"}},
)

async def get_session() -> AsyncGenerator[AsyncSession, None]:
    """
    Dependency to get an async database session.
    """
    async with async_session() as session:
        yield session

@router.get("/", response_model=List[ContinentOut])
async def read_continents(
    skip: int = 0,
    limit: int = 10,
    session: AsyncSession = Depends(get_db)
):
    """
    Retrieve a list of continents with pagination.
    """
    continents = await get_continents(session, skip=skip, limit=limit)
    return continents

@router.get("/{continent_code}", response_model=ContinentOut)
async def read_continent(continent_code: str, session: AsyncSession = Depends(get_db)):
    """
    Retrieve a single continent by its code.
    """
    continent = await get_continent_by_code(session, continent_code)
    if not continent:
        raise HTTPException(status_code=404, detail="Continent not found")
    return continent

@router.post("/", response_model=ContinentOut)
async def create_new_continent(continent: ContinentCreate, session: AsyncSession = Depends(get_db)):
    """
    Create a new continent.
    """
    existing_continent = await get_continent_by_code(session, continent.code)
    if existing_continent:
        raise HTTPException(status_code=400, detail="Continent already exists")
    new_continent = await create_continent(session, continent)
    return new_continent

@router.put("/{continent_code}", response_model=ContinentOut)
async def update_existing_continent(continent_code: str, continent_update: ContinentUpdate, session: AsyncSession = Depends(get_db)):
    """
    Update an existing continent.
    """
    db_continent = await get_continent_by_code(session, continent_code)
    if not db_continent:
        raise HTTPException(status_code=404, detail="Continent not found")
    updated_continent = await update_continent(session, db_continent, continent_update)
    return updated_continent

@router.delete("/{continent_code}")
async def delete_existing_continent(continent_code: str, session: AsyncSession = Depends(get_db)):
    """
    Delete a continent.
    """
    db_continent = await get_continent_by_code(session, continent_code)
    if not db_continent:
        raise HTTPException(status_code=404, detail="Continent not found")
    await delete_continent(session, db_continent)
    return {"detail": "Continent deleted"}

app\routers\country_router.py:
from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.ext.asyncio import AsyncSession
from typing import AsyncGenerator, List, Optional
from datetime import datetime

from app.database import async_session
from app.models.models import Country
from app.schemas import CountryCreate, CountryUpdate, CountryOut
from app.dependencies import get_db
from app.crud import (
    get_country_by_name_cached, get_countries, create_country, update_country, delete_country, get_country_continent_mapping
)

router = APIRouter(
    prefix="/countries",
    tags=["countries"],
    responses={404: {"description": "Not found"}},
)

async def get_session() -> AsyncGenerator[AsyncSession, None]:
    """
    Dependency to get an async database session.
    """
    async with async_session() as session:
        yield session

@router.get("/", response_model=List[CountryOut])
async def read_countries(
    skip: int = 0,
    limit: Optional[int] = 10,  # Make limit optional
    updated_after: Optional[datetime] = Query(None),
    session: AsyncSession = Depends(get_db)
):
    """
    Retrieve a list of countries with pagination and optional updated_at filtering.
    If limit is set to -1, return all countries.
    """
    if limit == -1:  # Special case for no limit
        limit = None

    countries = await get_countries(session, skip=skip, limit=limit, updated_after=updated_after)
    return countries


@router.get("/{country_code}", response_model=CountryOut)
async def read_country(country_code: str, session: AsyncSession = Depends(get_db)):
    """
    Retrieve a single country by its code.
    """
    result = await session.get(Country, country_code)
    if not result:
        raise HTTPException(status_code=404, detail="Country not found")
    return result

@router.post("/", response_model=CountryOut)
async def create_new_country(country: CountryCreate, session: AsyncSession = Depends(get_db)):
    """
    Create a new country.
    """
    existing_country = await session.get(Country, country.code)
    if existing_country:
        raise HTTPException(status_code=400, detail="Country already exists")
    new_country = await create_country(session, country)
    return new_country

@router.put("/{country_code}", response_model=CountryOut)
async def update_existing_country(country_code: str, country_update: CountryUpdate, session: AsyncSession = Depends(get_db)):
    """
    Update an existing country.
    """
    db_country = await session.get(Country, country_code)
    if not db_country:
        raise HTTPException(status_code=404, detail="Country not found")
    updated_country = await update_country(session, db_country, country_update)
    return updated_country

@router.delete("/{country_code}")
async def delete_existing_country(country_code: str, session: AsyncSession = Depends(get_db)):
    """
    Delete a country.
    """
    db_country = await session.get(Country, country_code)
    if not db_country:
        raise HTTPException(status_code=404, detail="Country not found")
    await delete_country(session, db_country)
    return {"detail": "Country deleted"}

@router.get("/search/{country_name}", response_model=CountryOut)
async def search_country_by_name(country_name: str, session: AsyncSession = Depends(get_db)):
    """
    Search for a country by name and return its details including continent.
    """
    country = await get_country_by_name_cached(session, country_name)
    if not country:
        raise HTTPException(status_code=404, detail="Country not found")
    return country

@router.get("/continents/", response_model=dict)
async def get_country_continent_mapping_api(session: AsyncSession = Depends(get_db)):
    """
    Retrieve a dictionary mapping each country name to its corresponding continent name.
    """
    mapping = await get_country_continent_mapping(session)
    if not mapping:
        raise HTTPException(status_code=404, detail="No countries or continents found")
    return mapping


app\routers\root_router.py:
from fastapi import APIRouter
import logging

router = APIRouter(
    responses={404: {"description": "Not found"}},
)

@router.get("/")
async def root():
    """
    Root endpoint that returns a welcome message.
    """
    logging.info("Root endpoint accessed")
    return {"message": "Welcome to the Country-Continent API!"}

app\routers\__init__.py:
# Import routers to include them in the main app
from .country_router import router as country_router
from .continent_router import router as continent_router

app\schemas\schemas.py:
# app/schemas/schemas.py

from pydantic import BaseModel
from typing import Optional, List
from datetime import datetime

class CountryBase(BaseModel):
    """
    Base schema for Country, containing fields common to all schemas.
    """
    code: str
    name: str
    full_name: str
    iso3: str
    number: int
    continent_code: str

class CountryCreate(CountryBase):
    """
    Schema for creating a new Country.
    """
    pass

class CountryUpdate(BaseModel):
    """
    Schema for updating an existing Country.
    All fields are optional to allow partial updates.
    """
    name: Optional[str] = None
    full_name: Optional[str] = None
    iso3: Optional[str] = None
    number: Optional[int] = None
    continent_code: Optional[str] = None

class CountryOut(CountryBase):
    """
    Schema for returning Country data, including the updated_at timestamp.
    """
    updated_at: datetime

    class Config:
        from_attributes = True  # Updated for Pydantic v2

class ContinentBase(BaseModel):
    """
    Base schema for Continent, containing fields common to all schemas.
    """
    code: str
    name: str

class ContinentCreate(ContinentBase):
    """
    Schema for creating a new Continent.
    """
    pass

class ContinentUpdate(BaseModel):
    """
    Schema for updating an existing Continent.
    """
    name: Optional[str] = None

class ContinentOut(ContinentBase):
    """
    Schema for returning Continent data, including the updated_at timestamp.
    """
    updated_at: datetime

    class Config:
        from_attributes = True  # Updated for Pydantic v2


app\schemas\__init__.py:
# This file makes it easier to import schemas elsewhere in the project
from .schemas import (
    CountryBase, CountryCreate, CountryUpdate, CountryOut,
    ContinentBase, ContinentCreate, ContinentUpdate, ContinentOut
)


tests\test_api.py:
import sys
import os

import pytest
from httpx import AsyncClient
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import sessionmaker


sys.path.append(os.path.abspath('.'))
from app.main import app
from app.database import Base, engine

# Create a new AsyncSession for testing
TestingSessionLocal = sessionmaker(
    bind=engine, class_=AsyncSession, expire_on_commit=False
)

@pytest.fixture(scope="module")
async def async_client():
    async with AsyncClient(app=app, base_url="http://test") as client:
        yield client

@pytest.fixture(scope="module", autouse=True)
async def setup_database():
    # Create tables
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    yield
    # Drop tables after tests
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.drop_all)
